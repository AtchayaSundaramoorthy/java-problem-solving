class Solution {
    public int longestMountain(int[] arr) {
        int n = arr.length;
        if (n < 1) {
            return 0;
        }

        int[] up = new int[n];
        int[] down = new int[n];

        // Count increasing sequences from the left
        for (int i = 1; i < n; i++) {
            if (arr[i] > arr[i - 1]) {
                up[i] = up[i - 1] + 1;
            }
        }

        // Count decreasing sequences from the right
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] > arr[i + 1]) {
                down[i] = down[i + 1] + 1;
            }
        }

        int max = 0;
        // Find the peak where both up and down exist
        for (int i = 0; i < n; i++) {
            if (up[i] > 0 && down[i] > 0) {
                max = Math.max(max, up[i] + down[i] + 1);
            }
        }
        return max;
    }
}
